% MATLAB Script to Create a Simulink Model for APUF with Multiple Challenge Bits and Analyze it

% Step 1: Create a New Simulink Model
modelName = 'APUF_MUX_Simulation';
open_system(new_system(modelName));

% Parameters
n = 4; % Number of challenge bits
num_tests = 10; % Number of test cases

% Positioning parameters
xpos = 100; % Initial x-position for placing blocks
ypos = 100; % Initial y-position for placing blocks
blockSpacing = 60; % Vertical spacing between blocks

% Step 2: Add Blocks
% Add Constant blocks for each Challenge Bit and the MUX
mux_inputs = cell(1, n);
for i = 1:n
    blockName = sprintf('C%d', i);
    add_block('simulink/Sources/Constant', [modelName, '/', blockName], ...
        'Position', [xpos, ypos + (i-1)*blockSpacing, xpos+50, ypos+30 + (i-1)*blockSpacing], ...
        'Value', num2str(randi([0, 1]))); % Random challenge bit (0 or 1)
    mux_inputs{i} = [blockName, '/1'];
end

% Add MUX block to combine challenge bits
mux_name = 'MUX';
add_block('simulink/Signal Routing/Mux', [modelName, '/', mux_name], ...
    'Position', [xpos+150, ypos, xpos+200, ypos+30 + (n-1)*blockSpacing], ...
    'Inputs', num2str(n)); % Number of inputs to MUX

% Connect all Challenge blocks to MUX
for i = 1:n
    add_line(modelName, mux_inputs{i}, [mux_name, '/', num2str(i)]);
end

% Add Gain block to simulate the weight with variation
blockNameGain = 'Gain';
add_block('simulink/Math Operations/Gain', [modelName, '/', blockNameGain], ...
    'Position', [xpos+300, ypos + (n-1)*blockSpacing/2, xpos+350, ypos+30 + (n-1)*blockSpacing/2], ...
    'Gain', num2str(randn() + 0.15 * randn())); % Gain with manufacturing variation

% Connect MUX output to Gain input
add_line(modelName, [mux_name, '/1'], [blockNameGain, '/1']);

% Add Random Number block to simulate environmental noise
add_block('simulink/Sources/Random Number', [modelName, '/Noise'], ...
    'Position', [xpos+450, ypos + (n-1)*blockSpacing/2, xpos+500, ypos+30 + (n-1)*blockSpacing/2], ...
    'Mean', '0', 'Variance', '0.1'); % Base noise level and voltage variation

% Add Sum block to combine the weighted challenge and noise
add_block('simulink/Math Operations/Sum', [modelName, '/Sum'], ...
    'Position', [xpos+600, ypos + (n-1)*blockSpacing/2, xpos+650, ypos+30 + (n-1)*blockSpacing/2], ...
    'Inputs', '++'); % Sum block to combine the challenge and noise

% Connect Gain output to Sum input
add_line(modelName, [blockNameGain, '/1'], 'Sum/1');

% Connect Noise to Sum input
add_line(modelName, 'Noise/1', 'Sum/2');

% Add Comparator block for the arbiter decision
add_block('simulink/Logic and Bit Operations/Compare To Zero', [modelName, '/Comparator'], ...
    'Position', [xpos+750, ypos + (n-1)*blockSpacing/2, xpos+800, ypos+30 + (n-1)*blockSpacing/2]);

% Connect Sum output to Comparator input
add_line(modelName, 'Sum/1', 'Comparator/1');

% Add To Workspace block to save the response in MATLAB workspace
add_block('simulink/Sinks/To Workspace', [modelName, '/Response'], ...
    'Position', [xpos+900, ypos + (n-1)*blockSpacing/2, xpos+950, ypos+30 + (n-1)*blockSpacing/2], ...
    'VariableName', 'responses', 'SaveFormat', 'Structure');

% Connect Comparator to To Workspace block
add_line(modelName, 'Comparator/1', 'Response/1');

% Step 3: Run the Simulation

% Set simulation time
set_param(modelName, 'StopTime', '10');

% Run the simulation
simOut = sim(modelName);

% Capture the output for further analysis
responses = simOut.get('responses').signals.values;

% Step 4: Analyze the Results in MATLAB

% Generate Random Challenges for Analysis
challenges = randi([0, 1], num_tests, n); % Generate random challenges
disp('Challenges:');
disp(challenges);

% Transform Challenges to Feature Vectors
Psi = zeros(num_tests, n+1); % Preallocate for feature vectors
for i = 1:num_tests
    c = challenges(i, :);
    for j = 1:n
        Psi(i, j) = prod(1 - 2*c(j:n)); % Compute Ψ[i]
    end
    Psi(i, n+1) = 1; % Ψ[n] = 1
end
disp('Feature Vectors (Psi):');
disp(Psi);

% Simulate Environmental Effects (Noise)
base_noise_level = 0.1; % Base noise level for thermal noise
voltage_variation = 0.05; % Simulating supply voltage variations
manufacturing_variation = 0.15; % Simulating larger process variations
environmental_noise = base_noise_level + voltage_variation * randn(num_tests, 1);

% Compute PUF Responses with Noise
delta = (Psi * randn(n+1, 1)) + environmental_noise; % Compute the delta values with noise
responses_matlab = delta < 0; % Compute responses (r = 0 if ∆ >= 0, otherwise r = 1)
disp('Responses:');
disp(responses_matlab);

% Simulate Noisy Responses for Training (with more complex noise)
noisy_responses = responses_matlab;
for i = 1:num_tests
    if rand < (base_noise_level + voltage_variation * abs(randn))
        noisy_responses(i) = ~responses_matlab(i); % Flip response with probability based on complex noise
    end
end
disp('Noisy Responses:');
disp(noisy_responses);

% Analyze Noise and Reliability
noise_analysis = sum(responses_matlab ~= noisy_responses) / num_tests;
reliability = 1 - noise_analysis;
disp(['Noise Analysis (Error Rate): ', num2str(noise_analysis * 100), '%']);
disp(['Reliability: ', num2str(reliability * 100), '%']);

% Test Model Accuracy
model_accuracy = sum(responses_matlab == noisy_responses) / num_tests;
disp(['Model Accuracy: ', num2str(model_accuracy * 100), '%']);

% Simulate Uniqueness (for simplicity, use variation on weight vector)
uniqueness_variation = randn(1, n+1) * manufacturing_variation;
w_unique = randn(n+1, 1) + uniqueness_variation; % A slightly different PUF instance
delta_unique = (Psi * w_unique') + environmental_noise;
unique_responses = delta_unique < 0;

% Evaluate Uniqueness
uniqueness = sum(responses_matlab ~= unique_responses) / num_tests;
disp(['Uniqueness: ', num2str(uniqueness * 100), '%']);

% Final Matching Rate Evaluation
matching_rate = sum(responses_matlab == noisy_responses) / num_tests;
disp(['Final Matching Rate: ', num2str(matching_rate * 100), '%']);

% Plotting Results

% Waveform of Challenges
figure;
subplot(3,2,1);
plot(challenges, 'o-');
title('Challenges (Waveform)');
xlabel('Test Case');
ylabel('Challenge Bit');

% Waveform of Responses
subplot(3,2,2);
plot(responses_matlab, 'o-');
title('Responses (Waveform)');
xlabel('Test Case');
ylabel('Response');

% Waveform of Environmental Noise
subplot(3,2,3);
plot(environmental_noise, 'o-');
title('Environmental Noise (Waveform)');
xlabel('Test Case');
ylabel('Noise');

% Noise Analysis and Reliability Plot
subplot(3,2,4);
bar([noise_analysis * 100, reliability * 100]);
title('Noise Analysis and Reliability');
ylabel('Percentage');
set(gca, 'XTickLabel', {'Error Rate', 'Reliability'});

% Model Accuracy Plot
subplot(3,2,5);
bar(model_accuracy * 100);
title('Model Accuracy');
ylabel('Accuracy (%)');
set(gca, 'XTickLabel', {'Accuracy'});

% Uniqueness and Matching Rate Plot
subplot(3,2,6);
bar([uniqueness * 100, matching_rate * 100]);
title('Uniqueness and Final Matching Rate');
ylabel('Percentage');
set(gca, 'XTickLabel', {'Uniqueness', 'Matching Rate'});

% Save the model without closing it
save_system(modelName);
